# This policy prevents any changes (creation, destruction or updates)
# to blacklisted resources.

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

check_for_db_backup = func() {
  valid = true

  found_resources = find_resources_from_plan("aws_db_instance")

  for found_resources as address, r {
    print("Database resource", address, "was found")
    if r.destroy == false {
      if r.diff.backup_retention_period.new == "" or r.diff.backup_window.new == "" {
        print ("backup_retention_period and backup_window must be defined")
        valid = false
      }
    }
  }

  return valid
}

# Main rule
main = rule {
  check_for_db_backup()
}
